<?php 
declare(strict_types=1);
use PHPUnit\Framework\TestCase;

$GLOBALS['rootpath'] = $GLOBALS['rootpath'] ?? "htdocs\Game-Library\server";
require_once $GLOBALS['rootpath']."\inc\getCalculations.inc.php";

/**
 * @group integration
 * @group purchases
 */
final class integration_Test extends TestCase
{
	/**
	 * @medium
	 * @coversNothing
	 * @testWith [30]
	 *           [2269]
	 * 30   = Wizardry 7
	 * 2269 = Darksiders 2 Deathinitive edition
	 */
	public function test_saleprice($useproductid) {
		//Formula: (MSRP/TotalMSRP)*BundlePrice
		$conn=get_db_connection();
		$settings=getsettings($conn);
		$calculations=reIndexArray(getCalculations("",$conn),"Game_ID");
		$purchases=reIndexArray(getPurchases("",$conn), "TransID");
		
		foreach ($calculations[$useproductid]["TopBundleIDs"] as $bundle) {
			$totalMSRP=0;
			$totalSale=0;
			foreach ($purchases[$bundle]["GamesinBundle"] as $gamein){
				if($settings["status"][$calculations[$gamein["GameID"]]["Status"]]["Count"] == 1) {
					$totalMSRP+=$calculations[$gamein["GameID"]]["MSRP"];
					$totalSale+=$calculations[$gamein["GameID"]]["SalePrice"];
				}				
			}
			
			$totalExpectedSale=0;
			foreach ($purchases[$bundle]["GamesinBundle"] as $gamein){
				$expectedSale=($calculations[$gamein["GameID"]]["MSRP"]/$totalMSRP)*$purchases[$bundle]["Paid"];
				if($settings["status"][$calculations[$gamein["GameID"]]["Status"]]["Count"] == 1) {
					$totalExpectedSale += $expectedSale;
				}
				$this->assertEquals($expectedSale,$calculations[$gamein["GameID"]]["SalePrice"]);
			}
			$this->assertEquals($totalExpectedSale,$totalSale);
		}
	}

	/**
	 * @medium
	 * @coversNothing
	 * @testWith [30]
	 *           [2269]
	 * 30   = Wizardry 7
	 * 2269 = Darksiders 2 Deathinitive edition
	 */
	public function test_altsaleprice($useproductid) {
		/*
		//Formula:
		//GL3=sum(filter(Purchases!AM:AM,Purchases!C:C=A2,Purchases!B:B<>"Bundle"))
		//Purchases!AM=if(AI2=A2,R2, (iferror(S2/sum(filter(S:S,AI:AI=AI2,B:B<>"Bundle",AP:AP=true)),1/COUNTA(filter(A:A,AI:AI=AI2,B:B<>"Bundle",AP:AP=true)))*AJ2*Settings!$F$18)+iferror(O2/sum(filter(O:O,AI:AI=AI2,B:B<>"Bundle",AP:AP=true))*AJ2*Settings!$F$17,0)+if(sum(iferror(filter(AK:AK,AI:AI=AI2,B:B<>"Bundle",AP:AP=true)))=0,1/counta(filter(A:A,AI:AI=AI2,B:B<>"Bundle",AP:AP=true)),iferror(AK2/sum(filter(AK:AK,AI:AI=AI2,B:B<>"Bundle",AP:AP=true)),0))*AJ2*Settings!$F$16)*AP2
		//GL3 Formula: sum all instances of Alt sale that match Game Title and are not Bundle
		
		GL3 Formula: 
		if([Top Bundle Name]=[Title],
			[Paid], 
			(iferror([Want]/sum(filter([Want],
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)
				),
				1/COUNTA(filter([Title],
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)
				)
			)*[Bundle Price]*[Settings:Want Weight])
			
			+iferror([MSRP]/sum(filter([MSRP],
				[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true))*[Bundle Price]*[Settings:MSRP Weight],0)
			
			+if(sum(iferror(filter([Hours],
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)))=0,1/counta(filter(A:A,
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)),iferror([Hours]/sum(filter([Hours],
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)),0))*[Bundle Price]*[Settings:Play Time Weight])*[Count Game]
		
		GL3 pseudo code:
			if [Count Game] = false
				return 0
			if [Type] = Bundle
				return paid
			
			(iferror([Want]/sum(filter([Want],
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)
				),
				1/COUNTA(filter([Title],
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)
				)
			)*[Bundle Price]*[Settings:Want Weight])
			
			+iferror([MSRP]/sum(filter([MSRP],
				[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true))*[Bundle Price]*[Settings:MSRP Weight],0)
			
			+if(sum(iferror(filter([Hours],
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)))=0,1/counta(filter(A:A,
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)),iferror([Hours]/sum(filter([Hours],
					[Top Bundle Name]=[Top Bundle Name],
					[Type]<>"Bundle",
					[Count Game]=true)),0))*[Bundle Price]*[Settings:Play Time Weight])
		
		//GL4
		//=if(U158=A158,R158, (iferror(O158/sum(filter(O:O,U:U=U158,B:B<>"Bundle",AD:AD=true)),1/COUNTA(filter(A:A,U:U=U158,B:B<>"Bundle",AD:AD=true)))*V158*Settings!$C$18)+iferror(P158/sum(filter(P:P,U:U=U158,B:B<>"Bundle",AD:AD=true))*V158*Settings!$C$17,0)+if(sum(iferror(filter(AE:AE,U:U=U158,B:B<>"Bundle",AD:AD=true)))=0,1/counta(filter(A:A,U:U=U158,B:B<>"Bundle",AD:AD=true)),iferror(AE158/sum(filter(AE:AE,U:U=U158,B:B<>"Bundle",AD:AD=true)),0))*V158*Settings!$C$16)*AD158
		$conn=get_db_connection();
		$settings=getsettings($conn);
		$calculations=reIndexArray(getCalculations("",$conn),"Game_ID");
		$purchases=reIndexArray(getPurchases("",$conn), "TransID");
		*/
		foreach ($calculations[$useproductid]["TopBundleIDs"] as $bundle) {
			$totalMSRP=0;
			$totalSale=0;
			foreach ($purchases[$bundle]["GamesinBundle"] as $gamein){
				if($settings["status"][$calculations[$gamein["GameID"]]["Status"]]["Count"] == 1) {
					$totalMSRP+=$calculations[$gamein["GameID"]]["MSRP"];
					$totalSale+=$calculations[$gamein["GameID"]]["SalePrice"];
				}				
			}
			
			$totalExpectedSale=0;
			foreach ($purchases[$bundle]["GamesinBundle"] as $gamein){
				$expectedSale=($calculations[$gamein["GameID"]]["MSRP"]/$totalMSRP)*$purchases[$bundle]["Paid"];
				if($settings["status"][$calculations[$gamein["GameID"]]["Status"]]["Count"] == 1) {
					$totalExpectedSale += $expectedSale;
				}
				$this->assertEquals($expectedSale,$calculations[$gamein["GameID"]]["SalePrice"]);
			}
			$this->assertEquals($totalExpectedSale,$totalSale);
		}
	}

}